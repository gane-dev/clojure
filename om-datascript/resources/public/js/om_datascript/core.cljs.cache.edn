;; Analyzed by ClojureScript 1.7.170
{:use-macros {defui om.next}, :excludes #{}, :name om-datascript.core, :imports nil, :requires {gdom goog.dom, goog.dom goog.dom, om om.next, om.next om.next, dom om.dom, om.dom om.dom, d datascript.core, datascript.core datascript.core}, :uses nil, :defs {conn {:name om-datascript.core/conn, :file "src\\om_datascript\\core.cljs", :line 9, :column 1, :end-line 9, :end-column 10, :meta {:file "C:\\clojure\\project\\github1\\clojure\\om-datascript\\src\\om_datascript\\core.cljs", :line 9, :column 6, :end-line 9, :end-column 10}}, read {:name om-datascript.core/read, :file "src\\om_datascript\\core.cljs", :line 16, :column 1, :end-line 16, :end-column 15, :meta {:file "C:\\clojure\\project\\github1\\clojure\\om-datascript\\src\\om_datascript\\core.cljs", :line 16, :column 11, :end-line 16, :end-column 15}}, mutate {:name om-datascript.core/mutate, :file "src\\om_datascript\\core.cljs", :line 25, :column 1, :end-line 25, :end-column 17, :meta {:file "C:\\clojure\\project\\github1\\clojure\\om-datascript\\src\\om_datascript\\core.cljs", :line 25, :column 11, :end-line 25, :end-column 17}}, Counter {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name om-datascript.core/Counter, :variadic false, :file "src\\om_datascript\\core.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, reconciler {:name om-datascript.core/reconciler, :file "src\\om_datascript\\core.cljs", :line 51, :column 1, :end-line 51, :end-column 16, :meta {:file "C:\\clojure\\project\\github1\\clojure\\om-datascript\\src\\om_datascript\\core.cljs", :line 51, :column 6, :end-line 51, :end-column 16}}}, :require-macros {om om.next, om.next om.next, dom om.dom, om.dom om.dom}, :cljs.analyzer/constants {:seen #{:find pull ?selector :where :read :om.next/queries :config :default app/increment :value :state :app/title :parser :keys :app/counter $ :indexer :app/count :db/id :action :query :hierarchy ... ?e :mutate :in}, :order [:db/id :app/title :app/count :hierarchy :default :app/counter :state :query :value :find pull ?e ?selector ... :in $ :where app/increment :action :keys :config :indexer :om.next/queries :parser :read :mutate]}, :doc nil}